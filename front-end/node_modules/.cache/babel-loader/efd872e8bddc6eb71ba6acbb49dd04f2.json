{"ast":null,"code":"var _jsxFileName = \"/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ChatState } from '../Context/ChatProvider';\nimport Box from '@mui/material/Box';\nimport { Typography, FormControl, Input } from '@mui/material';\nimport { getSender } from \"../Config/ChatLogics\";\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ScrollableChat from './ScrollableChat';\nimport ChatBubbleIcon from '@mui/icons-material/ChatBubble';\nimport IconButton from '@mui/material/IconButton';\nimport SendIcon from '@mui/icons-material/Send';\nimport { ThemeProvider } from '@emotion/react';\nimport theme from \"../ui/Theme\"; // import io from 'socket.io-client'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n    } catch (error) {}\n  };\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post('/api/message', {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        console.log(data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, [selectedChat]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: \"1\",\n        maxWidth: \"100%\"\n      },\n      children: selectedChat && reset ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          paddingBottom: \"15px\",\n          sx: {\n            borderBottom: \"1px solid #112D4E\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            sx: {\n              alignItems: \"center\",\n              color: \"primary.main\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(ChatBubbleIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              fontSize: {\n                base: \"28px\",\n                md: \"30px\"\n              },\n              w: \"100%\",\n              alignItems: \"center\",\n              children: !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: getSender(user, selectedChat.users)\n              }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: selectedChat.chatName.toUpperCase()\n              }, void 0, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            d: \"flex\",\n            flexDir: \"column\",\n            justifyContent: \"flex-end\",\n            backgroundColor: \"secondary.main\",\n            w: \"100%\",\n            h: \"100%\",\n            overflowY: \"hidden\"\n          },\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: '500px',\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: \"50%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            style: {\n              overflow: \"auto\",\n              height: selectedChat.isGroupChat ? '85vh' : \"60vh\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n              messages: messages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              backgroundColor: \"#fff\",\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              padding: \"10px\",\n              borderRadius: \"8px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              onKeyDown: sendMessage,\n              isRequire: true,\n              children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 29\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n                placeholder: \"Enter a message..\",\n                onChange: typingHandler,\n                value: newMessage,\n                style: {\n                  flexGrow: \"1\",\n                  padding: \"0 15px\",\n                  backgroundColor: \"transparent\",\n                  border: \"none\",\n                  outline: \"none\"\n                },\n                disableUnderline: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: sendMessage,\n              sx: {\n                width: \"36px\",\n                height: \"36px\",\n                backgroundColor: \"primary.main\",\n                color: \"secondary.main\",\n                cursor: \"pointer\",\n                borderRadius: \"5px\",\n                lineHeight: \"36px\",\n                transition: \"all 0.3s cubic-bezier(0.88, 0.19, 0.37, 1.11)\"\n              },\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      //No DM\n      _jsxDEV(Box, {\n        d: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        h: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          fontFamily: \"Work sans\",\n          fontSize: \"20px\",\n          j: true,\n          children: \"Click on a user to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleChat, \"lbbgdVhqhXd29M2Iax+Ub4pc4rk=\");\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/SingleChat.js"],"names":["React","useEffect","ChatState","Box","Typography","FormControl","Input","getSender","UpdateGroupChatModal","CircularProgress","useState","axios","ScrollableChat","ChatBubbleIcon","IconButton","SendIcon","ThemeProvider","theme","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","user","selectedChat","setSelectedChat","fetchMessages","config","headers","Authorization","token","data","get","_id","error","sendMessage","event","key","post","content","chatId","console","log","typingHandler","e","target","value","flexGrow","maxWidth","reset","borderBottom","alignItems","color","base","md","isGroupChat","users","chatName","toUpperCase","d","flexDir","justifyContent","backgroundColor","w","h","overflowY","height","display","marginTop","overflow","padding","borderRadius","border","outline","width","cursor","lineHeight","transition"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { ChatState } from '../Context/ChatProvider'\nimport Box from '@mui/material/Box'\nimport { Typography, FormControl, Input } from '@mui/material';\nimport {getSender} from \"../Config/ChatLogics\"\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {useState} from 'react'\nimport axios from 'axios'\nimport ScrollableChat from './ScrollableChat'\n\nimport ChatBubbleIcon from '@mui/icons-material/ChatBubble';\nimport IconButton from '@mui/material/IconButton';\nimport SendIcon from '@mui/icons-material/Send';\n\nimport { ThemeProvider } from '@emotion/react';\nimport theme from \"../ui/Theme\";\n// import io from 'socket.io-client'\n\nconst SingleChat = ({fetchAgain, setFetchAgain}) => {\n\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState();\n    const [socketConnected, setSocketConnected] = useState(false)\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n\n    const { user, selectedChat, setSelectedChat} = ChatState();\n\n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n\n          setLoading(true);\n\n          const { data } = await axios.get(\n            `/api/message/${selectedChat._id}`,\n            config\n          );\n\n          setMessages(data);\n          setLoading(false);\n\n\n        } catch (error) {\n\n        }\n      };\n\n    const sendMessage = async(event) => {\n        if(event.key===\"Enter\" && newMessage){\n            try {\n                const config = {\n                    headers: {\n                        \"Content-Type\":\"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    }\n                }\n                setNewMessage(\"\");\n                const { data } = await axios.post('/api/message', {\n                    content: newMessage,\n                    chatId: selectedChat._id\n                },\n                config\n\n                )\n                console.log(data)\n\n                setMessages([...messages, data]);\n            } catch (error) {\n                console.log(error)\n            }\n        }}\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value)\n    }\n\n    useEffect(() => {\n            fetchMessages();\n    }, [selectedChat])\n\n    return (\n        <ThemeProvider theme={theme}>\n <div style={{flexGrow:\"1\", maxWidth:\"100%\"}}>\n        {selectedChat && reset? (\n            <>\n        <Box paddingBottom=\"15px\" sx={{borderBottom:\"1px solid #112D4E\"}}>\n        <Box display=\"flex\" sx={{alignItems:\"center\", color:\"primary.main\"}}>\n        <ChatBubbleIcon/>\n        <Typography\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        w=\"100%\"\n        alignItems=\"center\"\n      >\n          {!selectedChat.isGroupChat ? (\n              <>\n                {getSender(user,selectedChat.users)}\n                {/* profilemodal */}\n              </>\n          ) : (\n              <>\n              {selectedChat.chatName.toUpperCase()}\n              </>\n          )}\n      </Typography>\n        </Box>\n        </Box>\n\n          \n        <Box \n        sx={{\n        d:\"flex\",\n        flexDir:\"column\",\n        justifyContent:\"flex-end\",\n        backgroundColor:\"secondary.main\",\n        w:\"100%\",\n        h:\"100%\",\n        overflowY:\"hidden\",\n        }}\n        >\n        {loading ? (\n            <div style={{height:'500px',display: 'flex', justifyContent: 'center', marginTop:\"50%\"}}>\n                <CircularProgress/>\n            </div>\n            ):(\n            <div className=\"messages\" style={{overflow:\"auto\", height: selectedChat.isGroupChat ? '85vh' : \"60vh\"}}>\n                <ScrollableChat messages={messages}/>\n            </div>\n            )}\n            <Box sx={{\n                backgroundColor: \"#fff\",display: \"flex\", justifyContent: \"space-between\",padding: \"10px\",borderRadius: \"8px\"\n            }}>\n            <FormControl onKeyDown={sendMessage} isRequire>\n                {istyping ? <div>Loading...</div> : <></>}\n                <Input\n                    placeholder=\"Enter a message..\"\n                    onChange={typingHandler}\n                    value={newMessage}\n                    style={{flexGrow:\"1\", padding:\"0 15px\", backgroundColor:\"transparent\",border:\"none\",outline:\"none\"}}\n                    disableUnderline=\"true\"\n                />\n            </FormControl>\n            <IconButton onClick={sendMessage} sx={{\n                    width:\"36px\", height:\"36px\", backgroundColor:\"primary.main\",color:\"secondary.main\", cursor:\"pointer\"\n                    ,borderRadius:\"5px\", lineHeight:\"36px\",\n                    transition:\"all 0.3s cubic-bezier(0.88, 0.19, 0.37, 1.11)\"\n                }}>\n                <SendIcon/>\n                </IconButton>\n            </Box>\n          </Box>\n            </>\n        ) : (\n            //No DM\n            <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\" >\n                <Typography fontFamily=\"Work sans\" fontSize=\"20px\" j>\n                    Click on a user to start chatting\n                </Typography>\n            </Box>\n        )}\n    </div>\n        </ThemeProvider>\n    )\n}\n\nexport default SingleChat;\n"]},"metadata":{},"sourceType":"module"}