{"ast":null,"code":"var _jsxFileName = \"/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Paper, Typography, Avatar } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport Button from '@mui/material/Button';\nimport Stack from \"@mui/material/Stack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = () => {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n      console.log(data);\n      setChats(data);\n    } catch (error) {\n      console.log(\"Error fetching chats\");\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n    fetchChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: \"primary.main\",\n      alignItems: \"center\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      padding: \"2%\",\n      cursor: 'pointer'\n    },\n    children: chats ? /*#__PURE__*/_jsxDEV(Stack, {\n      style: {\n        maxHeight: 500,\n        overflow: 'auto'\n      },\n      fontSize: \"1rem\",\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(List, {\n        onClick: () => setSelectedChat(chat),\n        cursor: \"pointer\",\n        backgroundColor: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n        color: selectedChat === chat ? \"white\" : \"black\",\n        py: 2,\n        borderRadius: \"5px\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            marginRight: \"2%\"\n          },\n          size: \"sm\",\n          cursor: \"pointer\",\n          name: user.name,\n          src: user.pic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 39\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 41\n        }, this)]\n      }, chat._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 21\n  }, this);\n};\n\n_s(MyChats, \"LXAM3Ct8cu4VHioF0N7hjNZNBFg=\");\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js"],"names":["React","useState","useEffect","ChatState","axios","Paper","Typography","Avatar","Box","List","ChatLoading","getSender","Button","Stack","MyChats","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","fetchChats","config","headers","Authorization","token","data","get","console","log","error","JSON","parse","localStorage","getItem","backgroundColor","alignItems","display","flexWrap","padding","cursor","maxHeight","overflow","map","chat","marginRight","name","pic","isGroupChat","users","chatName","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport {ChatState} from \"../Context/ChatProvider\"\nimport axios from \"axios\";\nimport {Paper, Typography, Avatar} from \"@mui/material\"\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\"\nimport {getSender} from \"../Config/ChatLogics\"\nimport Button from '@mui/material/Button'\nimport Stack from \"@mui/material/Stack\"\n\n\n const MyChats = () => {\n    const [loggedUser, setLoggedUser] = useState();\n    const { selectedChat, setSelectedChat, user, chats, setChats} = ChatState();\n\n    const fetchChats = async () => {\n        // console.log(user._id);\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n\n          const { data } = await axios.get(\"/api/chat\", config);\n\n          console.log(data);\n\n          setChats(data);\n        } catch (error) {\n          console.log(\"Error fetching chats\")\n        }\n      };\n      useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n        fetchChats();\n\n      }, []);\n\n    return (\n        \n      \n\n                    <Box sx={{ backgroundColor:\"primary.main\", alignItems: \"center\", display: \"flex\", flexWrap: \"wrap\", padding: \"2%\", cursor: 'pointer'}}>\n              {/* <Avatar sx={{marginRight:\"2%\"}}>SP</Avatar>\n              <Typography variant='subtitles' fontSize=\"1rem\" color=\"secondary.main\">Pure</Typography> */}\n               { chats ? (\n                 \n                            <Stack style = {{ maxHeight: 500, overflow: 'auto'}} fontSize=\"1rem\" >\n                                {chats.map((chat) => (\n                                    <List\n                                    onClick={() => setSelectedChat(chat)}\n                                    cursor=\"pointer\"\n                                    backgroundColor = {selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                                    color = {selectedChat === chat ? \"white\" : \"black\"}\n                                    py={2}\n                                    borderRadius=\"5px\"\n                                    key={chat._id}\n                                    >\n                                      <Avatar\n                                    sx={{marginRight:\"2%\"}}\n                                    size=\"sm\"\n                                    cursor=\"pointer\"\n                                    name={user.name}\n                                    src={user.pic}\n                                    />\n                                        <Typography>\n                                            {!chat.isGroupChat ? getSender(loggedUser, chat.users):\n                                            chat.chatName}\n                                        </Typography>\n                                        \n                                    </List>\n                                ))}\n                            </Stack>\n                        ) : (\n                            <ChatLoading/>\n                        )}\n            </Box>\n    )\n}\n\nexport default MyChats;"]},"metadata":{},"sourceType":"module"}