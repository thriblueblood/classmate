{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ChatState } from '../Context/ChatProvider';\nimport Box from '@mui/material/Box';\nimport { Typography, FormControl, Input } from '@mui/material';\nimport { getSender } from \"../Config/ChatLogics\";\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ScrollableChat from './ScrollableChat'; // import io from 'socket.io-client'\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post('/api/message', {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    return (// <div>\n      {\n        /* {selectedChat ? (\n           <>\n           <Typography\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        pb={3}\n        px={2}\n        w=\"100%\"\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        justifyContent={{ base: \"space-between\" }}\n        alignItems=\"center\"\n        >\n         {!selectedChat.isGroupChat ? (\n             <>\n               {getSender(user,selectedChat.users)}\n               profilemodal\n             </>\n         ) : (\n             <>\n             {selectedChat.chatName.toUpperCase()}\n             <UpdateGroupChatModal\n             fetchAgain={fetchAgain}\n             setFetchAgain={setFetchAgain}\n             fetchMessages={fetchMessages}\n             />\n             </>\n         )}\n        </Typography>\n        <Typography>\n         \n         <Box d=\"flex\"\n        flexDir=\"column\"\n        justifyContent=\"flex-end\"\n        // padding=\"10\"\n        backgroundColor=\"#E8E8E8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"10\"\n        padding = \"10\"\n        >\n           {loading ? (\n               <CircularProgress />\n           ):(\n           <div className=\"messages\">\n               <ScrollableChat messages={messages}/>\n           </div>\n           )}\n           <FormControl onKeyDown={sendMessage} isRequire mt={3}>\n               {istyping ? <div>Loading...</div> : <></>}\n               <Input\n                   // variant=\"filled\"\n                   backgroundColor=\"#E0E0E0\"\n                   placeholder=\"Enter a message..\"\n                   // onChange={typingHandler}\n                   value={newMessage}\n               />\n           </FormControl>\n         </Box>\n        </Typography>\n           </>\n        ) : (\n           <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\" >\n               <Typography fontFamily=\"Work sans\" fontSize=\"50px\">\n                   Click on a user to start chatting\n               </Typography>\n               \n            </Box>\n        )}\n        </div> */\n      }\n    );\n  };\n};\n\n_s(SingleChat, \"2XyqV9UhAIgZOEFoYNQwQGT/6+w=\");\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/SingleChat.js"],"names":["React","useEffect","ChatState","Box","Typography","FormControl","Input","getSender","UpdateGroupChatModal","CircularProgress","useState","axios","ScrollableChat","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","user","selectedChat","setSelectedChat","sendMessage","event","key","config","headers","Authorization","token","data","post","content","chatId","_id","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,KAAlC,QAA+C,eAA/C;AACA,SAAQC,SAAR,QAAwB,sBAAxB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CACA;;AAEA,MAAMC,UAAU,GAAG,QAAiC;AAAA;;AAAA,MAAhC;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,GAAgC;AAEhD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,MAAyC5B,SAAS,EAAxD;;AAEA,QAAM6B,WAAW,GAAG,MAAMC,KAAN,IAAgB;AAChC,QAAGA,KAAK,CAACC,GAAN,KAAY,OAAZ,IAAuBb,UAA1B,EAAqC;AACjC,UAAI;AACA,cAAMc,MAAM,GAAG;AACXC,UAAAA,OAAO,EAAE;AACL,4BAAe,kBADV;AAELC,YAAAA,aAAa,EAAG,UAASR,IAAI,CAACS,KAAM;AAF/B;AADE,SAAf;AAMAhB,QAAAA,aAAa,CAAC,EAAD,CAAb;AACA,cAAM;AAAEiB,UAAAA;AAAF,YAAW,MAAM3B,KAAK,CAAC4B,IAAN,CAAW,cAAX,EAA2B;AAC9CC,UAAAA,OAAO,EAAEpB,UADqC;AAE9CqB,UAAAA,MAAM,EAAEZ,YAAY,CAACa;AAFyB,SAA3B,EAIvBR,MAJuB,CAAvB;AAOAjB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcsB,IAAd,CAAD,CAAX;AACH,OAhBD,CAgBE,OAAOK,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACL,WACI;AACI;AAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEY;AAFR;AA0EH,GAhGG;AAiGH,CA5GD;;GAAM9B,U;;KAAAA,U;AA6GN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { ChatState } from '../Context/ChatProvider'\nimport Box from '@mui/material/Box'\nimport { Typography, FormControl, Input } from '@mui/material';\nimport {getSender} from \"../Config/ChatLogics\"\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {useState} from 'react'\nimport axios from 'axios'\nimport ScrollableChat from './ScrollableChat'\n// import io from 'socket.io-client'\n\nconst SingleChat = ({fetchAgain, setFetchAgain}) => {\n\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState();\n    const [socketConnected, setSocketConnected] = useState(false)\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n\n    const { user, selectedChat, setSelectedChat} = ChatState();\n\n    const sendMessage = async(event) => {\n        if(event.key===\"Enter\" && newMessage){\n            try {\n                const config = {\n                    headers: {\n                        \"Content-Type\":\"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    }\n                }\n                setNewMessage(\"\");\n                const { data } = await axios.post('/api/message', {\n                    content: newMessage,\n                    chatId: selectedChat._id\n                },\n                config\n\n                )\n                setMessages([...messages, data]);\n            } catch (error) {\n                console.log(error)\n            }\n        }\n    return (\n        // <div>\n            {/* {selectedChat ? (\n                <>\n                <Typography\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n              {!selectedChat.isGroupChat ? (\n                  <>\n                    {getSender(user,selectedChat.users)}\n                    profilemodal\n                  </>\n              ) : (\n                  <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  />\n                  </>\n              )}\n          </Typography>\n          <Typography>\n              \n              <Box d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            // padding=\"10\"\n            backgroundColor=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"10\"\n            padding = \"10\"\n            >\n                {loading ? (\n                    <CircularProgress />\n                ):(\n                <div className=\"messages\">\n                    <ScrollableChat messages={messages}/>\n                </div>\n                )}\n                <FormControl onKeyDown={sendMessage} isRequire mt={3}>\n                    {istyping ? <div>Loading...</div> : <></>}\n                    <Input\n                        // variant=\"filled\"\n                        backgroundColor=\"#E0E0E0\"\n                        placeholder=\"Enter a message..\"\n                        // onChange={typingHandler}\n                        value={newMessage}\n                    />\n                </FormControl>\n              </Box>\n          </Typography>\n                </>\n            ) : (\n                <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\" >\n                    <Typography fontFamily=\"Work sans\" fontSize=\"50px\">\n                        Click on a user to start chatting\n                    </Typography>\n                    \n\n                </Box>\n\n            )}\n        </div> */}\n    )\n}\n}\nexport default SingleChat;\n"]},"metadata":{},"sourceType":"module"}