{"ast":null,"code":"var _jsxFileName = \"/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Paper, Typography, Avatar } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport Button from '@mui/material/Button';\nimport Stack from \"@mui/material/Stack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = () => {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n\n  const fetchChats = async () => {\n    if (!user._id) {\n      console.log(\"cant find _id\");\n      return;\n    } // console.log(user._id);\n\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n      console.log(data);\n      setChats(data);\n    } catch (error) {\n      console.log(\"Error fetching chats\");\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n    fetchChats();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <Box\n    // backgroundColor=\"#F8F8F8\"\n    // borderRadius=\"1px\"\n    // overflowY=\"hidden\"\n    // padding={3}\n    // borderRadius=\"5px\"\n    // alignItems=\"center\"\n    // height=\"100%\"\n    // weidth=\"100%\"\n    // >\n    // { chats ? (\n    //     <Paper style = {{ maxHeight: 300, overflow: 'auto'}} >\n    //         {chats.map((chat) => (\n    //             <List\n    //             onClick={() => setSelectedChat(chat)}\n    //             cursor=\"pointer\"\n    //             backgroundColor = {selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n    //             color = {selectedChat === chat ? \"white\" : \"black\"}\n    //             py={2}\n    //             borderRadius=\"5px\"\n    //             key={chat._id}\n    //             >\n    //                 <Typography>\n    //                     {!chat.isGroupChat ? getSender(loggedUser, chat.users):\n    //                     chat.chatName}\n    //                 </Typography>\n    //             </List>\n    //         ))}\n    //     </Paper>\n    // ) : (\n    //     <ChatLoading/>\n    // )}\n    // </Box>\n    // </Box>\n    _jsxDEV(Box, {\n      sx: {\n        backgroundColor: \"primary.main\",\n        alignItems: \"center\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        padding: \"2%\",\n        cursor: 'pointer'\n      },\n      children: chats ? /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          maxHeight: 500,\n          overflow: 'auto'\n        },\n        fontSize: \"1rem\",\n        children: chats.map(chat => /*#__PURE__*/_jsxDEV(Stack, {\n          onClick: () => setSelectedChat(chat),\n          cursor: \"pointer\",\n          backgroundColor: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n          color: selectedChat === chat ? \"white\" : \"black\",\n          py: 2,\n          borderRadius: \"5px\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              marginRight: \"2%\"\n            },\n            size: \"sm\",\n            cursor: \"pointer\",\n            name: user.name,\n            src: chats.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 41\n          }, this)]\n        }, chat._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this)\n  );\n};\n\n_s(MyChats, \"LXAM3Ct8cu4VHioF0N7hjNZNBFg=\");\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js"],"names":["React","useState","useEffect","ChatState","axios","Paper","Typography","Avatar","Box","List","ChatLoading","getSender","Button","Stack","MyChats","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","fetchChats","_id","console","log","config","headers","Authorization","token","data","get","error","JSON","parse","localStorage","getItem","backgroundColor","alignItems","display","flexWrap","padding","cursor","maxHeight","overflow","map","chat","marginRight","name","isGroupChat","users","chatName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAAQC,SAAR,QAAwB,yBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,UAAf,EAA2BC,MAA3B,QAAwC,eAAxC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,SAAR,QAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;;AAGC,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,EAA5C;AACA,QAAM;AAAEgB,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA,IAAjC;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA;AAA9C,MAA0DlB,SAAS,EAAzE;;AAEA,QAAMmB,UAAU,GAAG,YAAY;AAC7B,QAAI,CAACH,IAAI,CAACI,GAAV,EAAe;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA;AACD,KAJ4B,CAK3B;;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAAST,IAAI,CAACU,KAAM;AAD7B;AADI,OAAf;AAMA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAM1B,KAAK,CAAC2B,GAAN,CAAU,WAAV,EAAuBL,MAAvB,CAAvB;AAEAF,MAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AAEAT,MAAAA,QAAQ,CAACS,IAAD,CAAR;AACD,KAZD,CAYE,OAAOE,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF,GArBH;;AAuBEvB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,aAAa,CAACiB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAD,CAAb;AACAd,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT;AAKF;AAAA;AAEoB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEJ;AAEA,YAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEe,QAAAA,eAAe,EAAC,cAAlB;AAAkCC,QAAAA,UAAU,EAAE,QAA9C;AAAwDC,QAAAA,OAAO,EAAE,MAAjE;AAAyEC,QAAAA,QAAQ,EAAE,MAAnF;AAA2FC,QAAAA,OAAO,EAAE,IAApG;AAA0GC,QAAAA,MAAM,EAAE;AAAlH,OAAT;AAAA,gBAGHtB,KAAK,gBAEM,QAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AAAEuB,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAAf;AAAoD,QAAA,QAAQ,EAAC,MAA7D;AAAA,kBACKxB,KAAK,CAACyB,GAAN,CAAWC,IAAD,iBACP,QAAC,KAAD;AACA,UAAA,OAAO,EAAE,MAAM5B,eAAe,CAAC4B,IAAD,CAD9B;AAEA,UAAA,MAAM,EAAC,SAFP;AAGA,UAAA,eAAe,EAAI7B,YAAY,KAAK6B,IAAjB,GAAwB,SAAxB,GAAoC,SAHvD;AAIA,UAAA,KAAK,EAAI7B,YAAY,KAAK6B,IAAjB,GAAwB,OAAxB,GAAkC,OAJ3C;AAKA,UAAA,EAAE,EAAE,CALJ;AAMA,UAAA,YAAY,EAAC,KANb;AAAA,kCASE,QAAC,MAAD;AACF,YAAA,EAAE,EAAE;AAACC,cAAAA,WAAW,EAAC;AAAb,aADF;AAEF,YAAA,IAAI,EAAC,IAFH;AAGF,YAAA,MAAM,EAAC,SAHL;AAIF,YAAA,IAAI,EAAE5B,IAAI,CAAC6B,IAJT;AAKF,YAAA,GAAG,EAAE5B,KAAK,CAACD;AALT;AAAA;AAAA;AAAA;AAAA,kBATF,eAgBI,QAAC,UAAD;AAAA,sBACK,CAAC2B,IAAI,CAACG,WAAN,GACCtC,SAAS,CAACI,UAAD,EAAa+B,IAAI,CAACI,KAAlB,CADV,GAEAJ,IAAI,CAACK;AAHV;AAAA;AAAA;AAAA;AAAA,kBAhBJ;AAAA,WAOKL,IAAI,CAACvB,GAPV;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAFN,gBA+BM,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAlCR;AAAA;AAAA;AAAA;AAAA;AAvChB;AA6EH,CA7GA;;GAAMT,O;;KAAAA,O;AA+GP,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport {ChatState} from \"../Context/ChatProvider\"\nimport axios from \"axios\";\nimport {Paper, Typography, Avatar} from \"@mui/material\"\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\"\nimport {getSender} from \"../Config/ChatLogics\"\nimport Button from '@mui/material/Button'\nimport Stack from \"@mui/material/Stack\"\n\n\n const MyChats = () => {\n    const [loggedUser, setLoggedUser] = useState();\n    const { selectedChat, setSelectedChat, user, chats, setChats} = ChatState();\n\n    const fetchChats = async () => {\n      if (!user._id) {\n        console.log(\"cant find _id\");\n        return;\n      }\n        // console.log(user._id);\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n          \n          const { data } = await axios.get(\"/api/chat\", config);\n\n          console.log(data);\n\n          setChats(data);\n        } catch (error) {\n          console.log(\"Error fetching chats\")\n        }\n      };\n\n      useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n        fetchChats();\n      }, []);\n\n    return (\n        \n                        // <Box\n                        // backgroundColor=\"#F8F8F8\"\n                        // borderRadius=\"1px\"\n                        // overflowY=\"hidden\"\n                        // padding={3}\n                        // borderRadius=\"5px\"\n                        // alignItems=\"center\"\n                        // height=\"100%\"\n                        // weidth=\"100%\"\n                        // >\n                        // { chats ? (\n                        //     <Paper style = {{ maxHeight: 300, overflow: 'auto'}} >\n                        //         {chats.map((chat) => (\n                        //             <List\n                        //             onClick={() => setSelectedChat(chat)}\n                        //             cursor=\"pointer\"\n                        //             backgroundColor = {selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                        //             color = {selectedChat === chat ? \"white\" : \"black\"}\n                        //             py={2}\n                        //             borderRadius=\"5px\"\n                        //             key={chat._id}\n                        //             >\n                        //                 <Typography>\n                        //                     {!chat.isGroupChat ? getSender(loggedUser, chat.users):\n                        //                     chat.chatName}\n                        //                 </Typography>\n                        //             </List>\n                        //         ))}\n                        //     </Paper>\n                        // ) : (\n                        //     <ChatLoading/>\n                        // )}\n\n                        // </Box>\n\n                    // </Box>\n\n                    <Box sx={{ backgroundColor:\"primary.main\", alignItems: \"center\", display: \"flex\", flexWrap: \"wrap\", padding: \"2%\", cursor: 'pointer'}}>\n              {/* <Avatar sx={{marginRight:\"2%\"}}>SP</Avatar>\n              <Typography variant='subtitles' fontSize=\"1rem\" color=\"secondary.main\">Pure</Typography> */}\n               { chats ? (\n                 \n                            <List style = {{ maxHeight: 500, overflow: 'auto'}} fontSize=\"1rem\" >\n                                {chats.map((chat) => (\n                                    <Stack\n                                    onClick={() => setSelectedChat(chat)}\n                                    cursor=\"pointer\"\n                                    backgroundColor = {selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                                    color = {selectedChat === chat ? \"white\" : \"black\"}\n                                    py={2}\n                                    borderRadius=\"5px\"\n                                    key={chat._id}\n                                    >\n                                      <Avatar\n                                    sx={{marginRight:\"2%\"}}\n                                    size=\"sm\"\n                                    cursor=\"pointer\"\n                                    name={user.name}\n                                    src={chats.user}\n                                    />\n                                        <Typography>\n                                            {!chat.isGroupChat \n                                            ? getSender(loggedUser, chat.users)\n                                            :chat.chatName}\n                                            \n                                        </Typography>\n                                        \n                                    </Stack>\n                                ))}\n                            </List>\n                        ) : (\n                            <ChatLoading/>\n                        )}\n            </Box>\n    )\n}\n\nexport default MyChats;"]},"metadata":{},"sourceType":"module"}