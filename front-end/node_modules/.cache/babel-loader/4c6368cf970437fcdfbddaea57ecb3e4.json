{"ast":null,"code":"var _jsxFileName = \"/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ChatState } from '../Context/ChatProvider';\nimport Box from '@mui/material/Box';\nimport { Typography, FormControl, Input } from '@mui/material';\nimport { getSender } from \"../Config/ChatLogics\";\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ScrollableChat from './ScrollableChat'; // import io from 'socket.io-client'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n    } catch (error) {}\n  };\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post('/api/message', {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        console.log(data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, [selectedChat]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleChat, \"lbbgdVhqhXd29M2Iax+Ub4pc4rk=\");\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/SingleChat.js"],"names":["React","useEffect","ChatState","Box","Typography","FormControl","Input","getSender","UpdateGroupChatModal","CircularProgress","useState","axios","ScrollableChat","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","user","selectedChat","setSelectedChat","fetchMessages","config","headers","Authorization","token","data","get","_id","error","sendMessage","event","key","post","content","chatId","console","log","typingHandler","e","target","value","theme"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { ChatState } from '../Context/ChatProvider'\nimport Box from '@mui/material/Box'\nimport { Typography, FormControl, Input } from '@mui/material';\nimport {getSender} from \"../Config/ChatLogics\"\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {useState} from 'react'\nimport axios from 'axios'\nimport ScrollableChat from './ScrollableChat'\n// import io from 'socket.io-client'\n\nconst SingleChat = ({fetchAgain, setFetchAgain}) => {\n\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState();\n    const [socketConnected, setSocketConnected] = useState(false)\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n\n    const { user, selectedChat, setSelectedChat} = ChatState();\n\n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n\n          setLoading(true);\n\n          const { data } = await axios.get(\n            `/api/message/${selectedChat._id}`,\n            config\n          );\n\n          setMessages(data);\n          setLoading(false);\n\n\n        } catch (error) {\n\n        }\n      };\n\n    const sendMessage = async(event) => {\n        if(event.key===\"Enter\" && newMessage){\n            try {\n                const config = {\n                    headers: {\n                        \"Content-Type\":\"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    }\n                }\n                setNewMessage(\"\");\n                const { data } = await axios.post('/api/message', {\n                    content: newMessage,\n                    chatId: selectedChat._id\n                },\n                config\n\n                )\n                console.log(data)\n\n                setMessages([...messages, data]);\n            } catch (error) {\n                console.log(error)\n            }\n        }}\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value)\n    }\n\n    useEffect(() => {\n            fetchMessages();\n    }, [selectedChat])\n\n    return (\n        <ThemeProvider theme={theme}>\n\n        </ThemeProvider>\n       \n    )\n}\n\nexport default SingleChat;\n"]},"metadata":{},"sourceType":"module"}