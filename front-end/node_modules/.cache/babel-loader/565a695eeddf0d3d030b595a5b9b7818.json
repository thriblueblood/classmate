{"ast":null,"code":"var _jsxFileName = \"/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/SubjectPage/AddFileModal.js\",\n    _s = $RefreshSig$();\n\nimport AddIcon from '@mui/icons-material/Add';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { FormControl, Input, Form, Button, FormGroup, Box, TextField, Grid, Typography, Modal } from '@mui/material';\nimport axios from 'axios';\nimport Dropzone from 'react-dropzone';\nimport { ChatState } from '../Context/ChatProvider';\nimport { getSender } from '../Config/ChatLogics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddFileModal = () => {\n  _s();\n\n  const style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4\n  };\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  const {\n    user,\n    selectedChat\n  } = ChatState();\n  const [loading, setLoading] = useState(false);\n  const [file, setFile] = useState(null); // state for storing actual image\n\n  const [fileType, setFileType] = useState('');\n  const [filesList, setFilesList] = useState([]);\n  const [state, setState] = useState({\n    title: '',\n    description: ''\n  });\n  const [previewSrc, setPreviewSrc] = useState('');\n  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n\n  const dropRef = useRef();\n\n  const handleInputChange = event => {\n    setState({ ...state,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const onDrop = files => {\n    const [uploadedFile] = files;\n    setFile(uploadedFile);\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewSrc(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(uploadedFile);\n    setIsPreviewAvailable(uploadedFile.name.match(/.(jpeg|jpg|png)$/));\n    dropRef.current.style.border = '2px dashed #e9ebeb';\n  };\n\n  const updateBorder = dragState => {\n    if (dragState === 'over') {\n      dropRef.current.style.border = '2px solid #000';\n    } else if (dragState === 'leave') {\n      dropRef.current.style.border = '2px dashed #e9ebeb';\n    }\n  };\n\n  const handleOnSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const {\n        title,\n        description\n      } = state;\n\n      if (title.trim() !== '' && description.trim() !== '') {\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          formData.append('title', title);\n          formData.append('description', description);\n          formData.append('fileType', fileType);\n          formData.append();\n          await axios.post(`/api/file/upload`, formData, {\n            headers: {\n              \"Content-Type\": 'multipart/form-data'\n            }\n          });\n          console.log(formData);\n        } else {\n          console.log('Please select a file to add.');\n        }\n      } else {\n        console.log('Please enter all the field values.');\n      }\n    } catch (error) {\n      console.log(\"ERROR\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        backgroundColor: \"green\",\n        margin: \"1% 0%\",\n        marginLeft: \"auto\"\n      },\n      variant: \"contained\",\n      startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 116\n      }, this),\n      onClick: handleOpen,\n      children: \"Add New Material\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            name: \"title\",\n            type: \"text\",\n            value: state.title || '',\n            onChange: handleInputChange,\n            placeholder: \"Add title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"description\",\n            type: \"text\",\n            value: state.description || '',\n            onChange: handleInputChange,\n            placeholder: \"Add Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-section\",\n            children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n              onDrop: onDrop,\n              onDragEnter: () => updateBorder('over'),\n              onDragLeave: () => updateBorder('leave'),\n              children: _ref => {\n                let {\n                  getRootProps,\n                  getInputProps\n                } = _ref;\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n                    className: 'drop-zone'\n                  }),\n                  ref: dropRef,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 9\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Drag and drop a file OR click here to select a file\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 9\n                  }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Selected file:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 13\n                    }, this), \" \", file.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 7\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 3\n            }, this), previewSrc ? isPreviewAvailable ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-preview\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"preview-image\",\n                src: previewSrc,\n                alt: \"Preview\",\n                style: {\n                  width: \"20%\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 7\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-message\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No preview available for this file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 7\n            }, this) : /*#__PURE__*/_jsxDEV(Box, {\n              height: \"3%\",\n              width: \"3%\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Image preview will be shown here after selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 7\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"firstname\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fileType,\n            onChange: e => setFileType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \" Material \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \" Assignment \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \" Note \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleOnSubmit,\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"reset\",\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddFileModal, \"9qM1F9lU9YMzqSJfhrK4rrD61L4=\");\n\n_c = AddFileModal;\nexport default AddFileModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFileModal\");","map":{"version":3,"sources":["/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/SubjectPage/AddFileModal.js"],"names":["AddIcon","React","useState","useRef","useEffect","FormControl","Input","Form","Button","FormGroup","Box","TextField","Grid","Typography","Modal","axios","Dropzone","ChatState","getSender","AddFileModal","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","open","setOpen","handleOpen","handleClose","user","selectedChat","loading","setLoading","file","setFile","fileType","setFileType","filesList","setFilesList","state","setState","title","description","previewSrc","setPreviewSrc","isPreviewAvailable","setIsPreviewAvailable","dropRef","handleInputChange","event","target","name","value","onDrop","files","uploadedFile","fileReader","FileReader","onload","result","readAsDataURL","match","current","updateBorder","dragState","handleOnSubmit","preventDefault","trim","formData","FormData","append","post","headers","console","log","error","backgroundColor","margin","marginLeft","getRootProps","getInputProps","className","e"],"mappings":"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","sourcesContent":["\nimport AddIcon from '@mui/icons-material/Add';\nimport React, { useState , useRef, useEffect} from 'react'\nimport {FormControl, Input, Form, Button, FormGroup, Box, TextField, Grid, Typography, Modal} from '@mui/material'\nimport axios from 'axios'\nimport Dropzone from 'react-dropzone';\nimport {ChatState} from '../Context/ChatProvider'\nimport {getSender} from '../Config/ChatLogics'\nconst AddFileModal = () => {\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n      };\n    const [open, setOpen] = useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const {user, selectedChat} = ChatState();\n    const [loading, setLoading] = useState(false);\n    const [file, setFile] = useState(null); // state for storing actual image\n    const [fileType, setFileType] = useState('');\n    const [filesList, setFilesList] = useState([]);\n    const [state, setState] = useState({\n        title: '',\n        description: ''\n    });\n    const [previewSrc, setPreviewSrc] = useState('');\n    const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images\n    const dropRef = useRef();\n    const handleInputChange = (event) => {\n        setState({\n          ...state,\n          [event.target.name]: event.target.value\n        });\n      };\n\n      const onDrop = (files) => {\n        const [uploadedFile] = files;\n        setFile(uploadedFile);\n\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n          setPreviewSrc(fileReader.result);\n        };\n        fileReader.readAsDataURL(uploadedFile);\n        setIsPreviewAvailable(uploadedFile.name.match(/.(jpeg|jpg|png)$/));\n        dropRef.current.style.border = '2px dashed #e9ebeb';\n      };\n\n      const updateBorder = (dragState) => {\n        if (dragState === 'over') {\n          dropRef.current.style.border = '2px solid #000';\n        } else if (dragState === 'leave') {\n          dropRef.current.style.border = '2px dashed #e9ebeb';\n        }\n      };\n\n      const handleOnSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n          const { title, description } = state;\n\n          if (title.trim() !== '' && description.trim() !== '') {\n            if (file) {\n              const formData = new FormData();\n              formData.append('file', file);\n              formData.append('title', title);\n              formData.append('description', description);\n              formData.append('fileType', fileType);\n              formData.append()\n\n\n              await axios.post(`/api/file/upload`, formData, {\n                headers: {\n                    \"Content-Type\":'multipart/form-data',\n\n                }\n              });\n              console.log(formData);\n\n            } else {\n              console.log('Please select a file to add.');\n            }\n          } else {\n            console.log('Please enter all the field values.');\n          }\n        } catch (error) {\n          console.log(\"ERROR\")\n        }\n      };\n\n\n    return (\n        <div>\n         <Button style={{backgroundColor:\"green\", margin:\"1% 0%\",marginLeft:\"auto\"}}variant=\"contained\" startIcon={<AddIcon/>} onClick={handleOpen}>\n                Add New Material\n            </Button>\n        <Modal\n            open={open}\n            onClose={handleClose}>\n            <Box sx={style}>\n            <FormControl >\n            <TextField name=\"title\" type=\"text\" value={state.title || ''} onChange={handleInputChange} placeholder=\"Add title\"/>\n            <TextField name=\"description\" type=\"text\"  value={state.description || ''}onChange={handleInputChange} placeholder=\"Add Description\"/>\n            <div className=\"upload-section\">\n  <Dropzone onDrop={onDrop}\n  onDragEnter={() => updateBorder('over')}\n  onDragLeave={() => updateBorder('leave')}>\n    {({ getRootProps, getInputProps }) => (\n      <div {...getRootProps({ className: 'drop-zone' })} ref={dropRef}>\n        <input {...getInputProps()} />\n        <p>Drag and drop a file OR click here to select a file</p>\n        {file && (\n          <div>\n            <strong>Selected file:</strong> {file.name}\n          </div>\n        )}\n      </div>\n    )}\n  </Dropzone>\n  {previewSrc ? (\n    isPreviewAvailable ? (\n      <div className=\"image-preview\">\n        <img className=\"preview-image\" src={previewSrc} alt=\"Preview\" style={{width:\"20%\"}}/>\n      </div>\n    ) : (\n      <div className=\"preview-message\">\n        <p>No preview available for this file</p>\n      </div>\n    )\n  ) : (\n    <Box height=\"3%\" width=\"3%\">\n      <p>Image preview will be shown here after selection</p>\n    </Box>\n  )}\n</div>\n                  <label for=\"firstname\">Upload</label>\n\n                <select value = {fileType} onChange={(e)=> setFileType(e.target.value)}>\n                  <option> Material </option>\n                  <option> Assignment </option>\n                  <option> Note </option>\n                </select>\n\n                <Button onClick={handleOnSubmit} type=\"submit\" >Submit</Button>\n                <Button type=\"reset\" >Reset</Button>\n            </FormControl>\n\n            </Box>\n\n        </Modal>\n            \n        </div>\n    )\n}\n\nexport default AddFileModal\n"]},"metadata":{},"sourceType":"module"}