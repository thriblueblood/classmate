{"ast":null,"code":"var _jsxFileName = \"/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/MyChats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Paper, Typography, Avatar } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport Button from '@mui/material/Button';\nimport Stack from \"@mui/material/Stack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = () => {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n  const [loading, setLoading] = useState(true);\n\n  const fetchChats = async () => {\n    if (!user._id) {\n      console.log(\"cant find _id\");\n      return;\n    } // console.log(user._id);\n\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].isGroupChat === true) {\n          console.log(\"inder\" + i);\n          setChats(data);\n        }\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n    fetchChats();\n  }, [chats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      children: chats ? /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          maxHeight: \"5\"\n        },\n        children: chats === null || chats === void 0 ? void 0 : chats.map(chat => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            backgroundColor: \"primary.main\",\n            alignItems: \"center\",\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            padding: \"2%\",\n            cursor: 'pointer',\n            display: chat.isGroupChat ? \"none\" : chat.chatName,\n            marginBottom: \"2%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              marginRight: \"2%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitles\",\n            fontSize: \"1rem\",\n            color: \"secondary.main\",\n            children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MyChats, \"98cF9jeuCIMhSd2yAgJjiRQ8Eec=\");\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["/Users/thriblueblood/Desktop/SE/Year4_2/THESIS/pure/classmate/front-end/src/ChatPage/MyChats.js"],"names":["React","useState","useEffect","ChatState","axios","Paper","Typography","Avatar","Box","List","ChatLoading","getSender","Button","Stack","MyChats","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","loading","setLoading","fetchChats","_id","console","log","config","headers","Authorization","token","data","get","i","length","isGroupChat","error","JSON","parse","localStorage","getItem","maxHeight","map","chat","backgroundColor","alignItems","display","flexWrap","padding","cursor","chatName","marginBottom","marginRight","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport {ChatState} from \"../Context/ChatProvider\"\nimport axios from \"axios\";\nimport {Paper, Typography, Avatar} from \"@mui/material\"\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\"\nimport {getSender} from \"../Config/ChatLogics\"\nimport Button from '@mui/material/Button'\nimport Stack from \"@mui/material/Stack\"\n\n\n const MyChats = () => {\n    const [loggedUser, setLoggedUser] = useState();\n    const { selectedChat, setSelectedChat, user, chats, setChats} = ChatState();\n    const [loading, setLoading] = useState(true);\n\n    const fetchChats = async () => {\n      if (!user._id) {\n        console.log(\"cant find _id\");\n        return;\n      }\n        // console.log(user._id);\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n              \n            },\n          };\n          \n          const { data } = await axios.get(\"/api/chat\", config);\n\n          for (let i = 0; i < data.length; i++){\n              if (data[i].isGroupChat === true){\n                console.log(\"inder\"+i)\n                setChats(data);\n              }\n          }\n          setLoading(false)\n        } catch (error) {\n          console.log(error)\n        }\n      };\n\n      useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n        fetchChats();\n      }, [chats]);\n\n    return (\n      <div>\n      {\n        loading ? <h2>loading</h2>\n        :\n        <Box>\n        { chats ? (\n          <List style={{maxHeight:\"5\"}}>\n            {chats?.map((chat) => (\n             <Box sx={{ backgroundColor:\"primary.main\", alignItems: \"center\", display: \"flex\", flexWrap: \"wrap\", padding: \"2%\", cursor: 'pointer',display: chat.isGroupChat ? \"none\": chat.chatName, marginBottom:\"2%\" }}>\n       <Avatar sx={{marginRight:\"2%\"}}></Avatar>\n       <Typography variant='subtitles' fontSize=\"1rem\" color=\"secondary.main\">\n       {!chat.isGroupChat ? getSender(loggedUser, chat.users) :chat.chatName}\n       </Typography>\n     </Box>\n            ))}\n          </List>\n                 ) : (\n                     <ChatLoading/>\n                 )}\n     </Box>\n      }\n      </div>\n\n            \n    )\n}\n\nexport default MyChats;"]},"metadata":{},"sourceType":"module"}