{"ast":null,"code":"var _jsxFileName = \"/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/Components/MyRooms.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Paper, Typography, Avatar } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"../ChatPage/ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport Button from '@mui/material/Button';\nimport Stack from \"@mui/material/Stack\";\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomSideBarItem = styled(Avatar)(() => ({\n  margin: \"5% 0%\",\n  padding: \"5%\",\n  \":hover\": {\n    backgroundColor: 'red',\n    color: 'black',\n    position: 'relative'\n  },\n  cursor: 'pointer'\n}));\n_c = CustomSideBarItem;\n\nconst MyRooms = _ref => {\n  _s();\n\n  let {\n    fetch\n  } = _ref;\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n\n  const fetchChats = async () => {\n    if (!user._id) {\n      console.log(\"cant find _id\");\n      return;\n    } // console.log(user._id);\n\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].isGroupChat === true) {\n          console.log(\"inder\" + i);\n          setChats(data);\n        }\n      }\n    } catch (error) {\n      console.log(\"Error fetching chats\");\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n    fetchChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: \"primary.main\",\n      alignItems: \"center\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      padding: \"2%\",\n      cursor: 'pointer'\n    },\n    children: chats ? /*#__PURE__*/_jsxDEV(List, {\n      style: {\n        maxHeight: 500,\n        overflow: 'auto'\n      },\n      fontSize: \"1rem\",\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(CustomSideBarItem, {\n        onClick: () => setSelectedChat(chat),\n        py: 2,\n        borderRadius: \"5px\",\n        sx: {\n          display: chat.isGroupChat ? chat.chatName : \"none\"\n        },\n        children: [\"/>\", /*#__PURE__*/_jsxDEV(Typography, {\n          children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 41\n        }, this)]\n      }, chat._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 15\n  }, this);\n};\n\n_s(MyRooms, \"LXAM3Ct8cu4VHioF0N7hjNZNBFg=\");\n\n_c2 = MyRooms;\nexport default MyRooms;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomSideBarItem\");\n$RefreshReg$(_c2, \"MyRooms\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/Components/MyRooms.js"],"names":["React","useState","useEffect","ChatState","axios","Paper","Typography","Avatar","Box","List","ChatLoading","getSender","Button","Stack","styled","CustomSideBarItem","margin","padding","backgroundColor","color","position","cursor","MyRooms","fetch","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","fetchChats","_id","console","log","config","headers","Authorization","token","data","get","i","length","isGroupChat","error","JSON","parse","localStorage","getItem","alignItems","display","flexWrap","maxHeight","overflow","map","chat","chatName","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport {ChatState} from \"../Context/ChatProvider\"\nimport axios from \"axios\";\nimport {Paper, Typography, Avatar} from \"@mui/material\"\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"../ChatPage/ChatLoading\"\nimport {getSender} from \"../Config/ChatLogics\"\nimport Button from '@mui/material/Button'\nimport Stack from \"@mui/material/Stack\"\nimport styled from '@emotion/styled';\n\nconst CustomSideBarItem = styled(Avatar)(() => ({\n  margin: \"5% 0%\",\n  padding: \"5%\",\n  \":hover\" : {\n      backgroundColor : 'red',\n      color : 'black',\n      position : 'relative'\n  },\n  cursor: 'pointer',\n  \n}));\n\n\n const MyRooms = ({ fetch}) => {\n   \n    const [loggedUser, setLoggedUser] = useState();\n    const { selectedChat, setSelectedChat, user, chats, setChats} = ChatState();\n\n    const fetchChats = async () => {\n      if (!user._id) {\n        console.log(\"cant find _id\");\n        return;\n      }\n        // console.log(user._id);\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n              \n            },\n          };\n          \n          const { data } = await axios.get(\"/api/chat\", config);\n\n          for (let i = 0; i < data.length; i++){\n              if (data[i].isGroupChat === true){\n                console.log(\"inder\"+i)\n                setChats(data);\n              }\n          }\n        } catch (error) {\n          console.log(\"Error fetching chats\")\n        }\n      };\n\n      useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n        fetchChats();\n      }, []);\n\n    return (\n              <Box sx={{ backgroundColor:\"primary.main\", alignItems: \"center\", display: \"flex\", flexWrap: \"wrap\", padding: \"2%\", cursor: 'pointer'}}>\n               { chats ? (\n                            <List style = {{ maxHeight: 500, overflow: 'auto',}} fontSize=\"1rem\" >\n                                {chats.map((chat) => (\n                                    <CustomSideBarItem\n                                    onClick={() => setSelectedChat(chat)}\n                                    py={2}\n                                    borderRadius=\"5px\"\n                                    key={chat._id}\n                                    sx = {{display: chat.isGroupChat ? chat.chatName: \"none\"}}\n                                    >\n                                    \n                                    {/* <Avatar\n                                    sx={{marginRight:\"2%\"}}\n                                    size=\"sm\"\n                                    cursor=\"pointer\"\n                                    src={chats.pic} */}\n                                    \n                                    />\n                                        <Typography>\n                                            {!chat.isGroupChat \n                                            ? getSender(loggedUser, chat.users)\n                                            :chat.chatName}\n                                            \n                                        </Typography>\n                                        \n                                    </CustomSideBarItem>\n                                ))}\n                            </List>\n                        ) : (\n                            <ChatLoading/>\n                        )}\n            </Box>\n    )\n}\n\nexport default MyRooms;"]},"metadata":{},"sourceType":"module"}