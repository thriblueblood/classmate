{"ast":null,"code":"var _jsxFileName = \"/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { Paper, Typography, Avatar } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\";\nimport { getSender } from \"../Config/ChatLogics\";\nimport Button from '@mui/material/Button';\nimport Stack from \"@mui/material/Stack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyChats = () => {\n  _s();\n\n  const [loggedUser, setLoggedUser] = useState();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    chats,\n    setChats\n  } = ChatState();\n\n  const fetchChats = async () => {\n    if (!user._id) {\n      console.log(\"cant find _id\");\n      return;\n    } // console.log(user._id);\n\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(\"/api/chat\", config);\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].isGroupChat === true) {\n          console.log(\"inder\" + i);\n          setChats(data);\n        }\n      }\n    } catch (error) {\n      console.log(\"Error fetching chats\");\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n    fetchChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: \"primary.main\",\n      alignItems: \"center\",\n      display: \"grid\",\n      flexWrap: \"wrap\",\n      padding: \"2%\",\n      cursor: 'pointer'\n    },\n    children: chats ? /*#__PURE__*/_jsxDEV(List, {\n      style: {\n        maxHeight: 500,\n        overflow: 'auto'\n      },\n      fontSize: \"1rem\",\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(Stack, {\n        onClick: () => setSelectedChat(chat),\n        cursor: \"pointer\",\n        backgroundColor: selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\",\n        color: selectedChat === chat ? \"white\" : \"black\",\n        py: 2,\n        borderRadius: \"5px\",\n        sx: {\n          display: chat.isGroupChat ? \"none\" : chat.chatName\n        },\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          sx: {\n            marginRight: \"2%\"\n          },\n          size: \"sm\",\n          cursor: \"pointer\",\n          src: chats.pic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: !chat.isGroupChat ? getSender(loggedUser, chat.users) : chat.chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 41\n        }, this)]\n      }, chat._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(ChatLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 15\n  }, this);\n};\n\n_s(MyChats, \"LXAM3Ct8cu4VHioF0N7hjNZNBFg=\");\n\n_c = MyChats;\nexport default MyChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyChats\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/MyChats.js"],"names":["React","useState","useEffect","ChatState","axios","Paper","Typography","Avatar","Box","List","ChatLoading","getSender","Button","Stack","MyChats","loggedUser","setLoggedUser","selectedChat","setSelectedChat","user","chats","setChats","fetchChats","_id","console","log","config","headers","Authorization","token","data","get","i","length","isGroupChat","error","JSON","parse","localStorage","getItem","backgroundColor","alignItems","display","flexWrap","padding","cursor","maxHeight","overflow","map","chat","chatName","marginRight","pic","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport {ChatState} from \"../Context/ChatProvider\"\nimport axios from \"axios\";\nimport {Paper, Typography, Avatar} from \"@mui/material\"\nimport Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ChatLoading from \"./ChatLoading\"\nimport {getSender} from \"../Config/ChatLogics\"\nimport Button from '@mui/material/Button'\nimport Stack from \"@mui/material/Stack\"\n\n\n const MyChats = () => {\n    const [loggedUser, setLoggedUser] = useState();\n    const { selectedChat, setSelectedChat, user, chats, setChats} = ChatState();\n\n    const fetchChats = async () => {\n      if (!user._id) {\n        console.log(\"cant find _id\");\n        return;\n      }\n        // console.log(user._id);\n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n              \n            },\n          };\n          \n          const { data } = await axios.get(\"/api/chat\", config);\n\n          for (let i = 0; i < data.length; i++){\n              if (data[i].isGroupChat === true){\n                console.log(\"inder\"+i)\n                setChats(data);\n              }\n          }\n          \n        } catch (error) {\n          console.log(\"Error fetching chats\")\n        }\n      };\n\n      useEffect(() => {\n        setLoggedUser(JSON.parse(localStorage.getItem(\"userinfo\")));\n        fetchChats();\n      }, []);\n\n    return (\n              <Box sx={{ backgroundColor:\"primary.main\", alignItems: \"center\", display: \"grid\", flexWrap: \"wrap\", padding: \"2%\", cursor: 'pointer', }}>\n               { chats ? (\n                            <List style = {{ maxHeight: 500, overflow: 'auto',}} fontSize=\"1rem\" >\n                                {chats.map((chat) => (\n                                    <Stack\n                                    onClick={() => setSelectedChat(chat)}\n                                    cursor=\"pointer\"\n                                    backgroundColor = {selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                                    color = {selectedChat === chat ? \"white\" : \"black\"}\n                                    py={2}\n                                    borderRadius=\"5px\"\n                                    key={chat._id}\n                                    sx = {{display: chat.isGroupChat ? \"none\": chat.chatName}}\n                                    >\n                                    \n                                    <Avatar\n                                    sx={{marginRight:\"2%\"}}\n                                    size=\"sm\"\n                                    cursor=\"pointer\"\n                                    src={chats.pic}\n                                    \n                                    />\n                                        <Typography>\n                                            {!chat.isGroupChat \n                                            ? getSender(loggedUser, chat.users)\n                                            :chat.chatName}\n                                            \n                                        </Typography>\n                                        \n                                    </Stack>\n                                ))}\n                            </List>\n                        ) : (\n                            <ChatLoading/>\n                        )}\n            </Box>\n    )\n}\n\nexport default MyChats;"]},"metadata":{},"sourceType":"module"}