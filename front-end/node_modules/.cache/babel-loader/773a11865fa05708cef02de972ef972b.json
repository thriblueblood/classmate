{"ast":null,"code":"var _jsxFileName = \"/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/SingleChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { ChatState } from '../Context/ChatProvider';\nimport Box from '@mui/material/Box';\nimport { Typography, FormControl, Input } from '@mui/material';\nimport { getSender } from \"../Config/ChatLogics\";\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ScrollableChat from './ScrollableChat'; // import io from 'socket.io-client'\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPONT = 'http://localhost:5000';\nvar socket, selectedChatCompare;\n\nconst SingleChat = _ref => {\n  _s();\n\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const {\n    user,\n    selectedChat,\n    setSelectedChat\n  } = ChatState();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false); //   socket.emit(\"join chat\", selectedChat._id)\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    socket = io(ENDPONT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {} else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post('/api/message', {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: getSender(user, selectedChat.users)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          d: \"flex\",\n          flexDir: \"column\",\n          justifyContent: \"flex-end\" // padding=\"10\"\n          ,\n          backgroundColor: \"#E8E8E8\",\n          w: \"100%\",\n          h: \"100%\",\n          borderRadius: \"10\",\n          padding: \"10\",\n          children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages\",\n            children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n              messages: messages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            onKeyDown: sendMessage,\n            isRequire: true,\n            mt: 3,\n            children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input // variant=\"filled\"\n            , {\n              backgroundColor: \"#E0E0E0\",\n              placeholder: \"Enter a message..\",\n              onChange: typingHandler,\n              value: newMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        fontFamily: \"Work sans\",\n        fontSize: \"100px\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleChat, \"rTQDdo85GwhiBkaGhNH02jULvGA=\");\n\n_c = SingleChat;\nexport default SingleChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"sources":["/Users/purepolachan/Desktop/classmate_thri/classmate/front-end/src/ChatPage/SingleChat.js"],"names":["React","useEffect","ChatState","Box","Typography","FormControl","Input","getSender","UpdateGroupChatModal","CircularProgress","useState","axios","ScrollableChat","ENDPONT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","loading","setLoading","newMessage","setNewMessage","user","selectedChat","setSelectedChat","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","fetchMessages","config","headers","Authorization","token","data","get","_id","error","io","emit","on","newMessageRecieved","chat","sendMessage","event","key","post","content","chatId","console","log","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { ChatState } from '../Context/ChatProvider'\nimport Box from '@mui/material/Box'\nimport { Typography, FormControl, Input } from '@mui/material';\nimport {getSender} from \"../Config/ChatLogics\"\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {useState} from 'react'\nimport axios from 'axios'\nimport ScrollableChat from './ScrollableChat'\n// import io from 'socket.io-client'\n\n\nconst ENDPONT = 'http://localhost:5000';\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain}) => {\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [newMessage, setNewMessage] = useState(\"\");\n    const {user, selectedChat, setSelectedChat} = ChatState();\n    const [socketConnected, setSocketConnected] = useState(false)\n    const [typing, setTyping] = useState(false);\n    const [istyping, setIsTyping] = useState(false);\n\n\n\n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n    \n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n    \n          setLoading(true);\n    \n          const { data } = await axios.get(\n            `/api/message/${selectedChat._id}`,\n            config\n          );\n\n          setMessages(data);\n          setLoading(false);\n        //   socket.emit(\"join chat\", selectedChat._id)\n        \n        } catch (error) {\n          \n        }\n      };\n\n    useEffect(() => {\n        socket = io(ENDPONT)\n        socket.emit(\"setup\", user)\n        socket.on(\"connected\", () => setSocketConnected(true) )\n        socket.on(\"typing\", () => setIsTyping(true));\n        socket.on(\"stop typing\", () => setIsTyping(false));\n        \n        \n    }, [])\n\n    useEffect(() => {\n        fetchMessages();\n        selectedChatCompare = selectedChat\n    }, [selectedChat])\n\n    useEffect(() => {\n        socket.on(\"message recieved\", (newMessageRecieved) => {\n          if (\n            !selectedChatCompare || // if chat is not selected or doesn't match current chat\n            selectedChatCompare._id !== newMessageRecieved.chat._id\n          ) {\n          } else {\n            setMessages([...messages, newMessageRecieved]);\n          }\n        });\n      });\n\n    const sendMessage = async(event) => {\n        if(event.key===\"Enter\" && newMessage){\n            socket.emit(\"stop typing\", selectedChat._id);\n            try {\n                const config = {\n                    headers: {\n                        \"Content-Type\":\"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    }\n                }\n                setNewMessage(\"\");\n                const { data } = await axios.post('/api/message', {\n                    content: newMessage,\n                    chatId: selectedChat._id\n                },\n                config\n                \n                )\n                socket.emit(\"new message\", data);\n                setMessages([...messages, data]);\n            } catch (error) {\n                console.log(error)\n            }\n        }\n\n    }\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value);\n    \n        if (!socketConnected) return;\n    \n        if (!typing) {\n          setTyping(true);\n          socket.emit(\"typing\", selectedChat._id);\n        }\n        let lastTypingTime = new Date().getTime();\n        var timerLength = 3000;\n        setTimeout(() => {\n          var timeNow = new Date().getTime();\n          var timeDiff = timeNow - lastTypingTime;\n          if (timeDiff >= timerLength && typing) {\n            socket.emit(\"stop typing\", selectedChat._id);\n            setTyping(false);\n          }\n        }, timerLength);\n      };\n    return (\n        <div>\n            {selectedChat ? (\n                <>\n                <Typography\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n              {!selectedChat.isGroupChat ? (\n                  <>\n                    {getSender(user,selectedChat.users)}\n                    {/* profilemodal */}\n                  </>\n              ) : (\n                  <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                  fetchAgain={fetchAgain}\n                  setFetchAgain={setFetchAgain}\n                  fetchMessages={fetchMessages}\n                  />\n                  </>\n              )}\n          </Typography>\n          <Typography>\n              \n              <Box d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            // padding=\"10\"\n            backgroundColor=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"10\"\n            padding = \"10\"\n            >\n                {loading ? (\n                    <CircularProgress />\n                ):(\n                <div className=\"messages\">\n                    <ScrollableChat messages={messages}/>\n                </div>\n                )}\n                <FormControl onKeyDown={sendMessage} isRequire mt={3}>\n                    {istyping ? <div>Loading...</div> : <></>}\n                    <Input\n                        // variant=\"filled\"\n                        backgroundColor=\"#E0E0E0\"\n                        placeholder=\"Enter a message..\"\n                        onChange={typingHandler}\n                        value={newMessage}\n                    />\n                </FormControl>\n              </Box>\n          </Typography>\n                </>\n            ) : (\n                <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\" >\n                    <Typography fontFamily=\"Work sans\" fontSize=\"100px\">\n                        Click on a user to start chatting\n                    </Typography>\n                    \n\n                </Box>\n\n            )}\n        </div>\n    )\n}\n\nexport default SingleChat"]},"metadata":{},"sourceType":"module"}